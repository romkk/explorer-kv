diff -uNr bitcoin-0.12.1/src/clientversion.cpp bitcoin-0.12.1-explorer/src/clientversion.cpp
--- bitcoin-0.12.1/src/clientversion.cpp	2016-04-11 19:01:43.000000000 +0800
+++ bitcoin-0.12.1-explorer/src/clientversion.cpp	2016-04-19 17:50:58.000000000 +0800
@@ -108,6 +108,6 @@
             ss << "; " << *it;
         ss << ")";
     }
-    ss << "/";
+    ss << "/btc.com/";
     return ss.str();
 }
diff -uNr bitcoin-0.12.1/src/init.cpp bitcoin-0.12.1-explorer/src/init.cpp
--- bitcoin-0.12.1/src/init.cpp	2016-04-11 19:01:43.000000000 +0800
+++ bitcoin-0.12.1-explorer/src/init.cpp	2016-04-21 10:36:30.000000000 +0800
@@ -513,6 +513,7 @@
         strUsage += HelpMessageOpt("-rpcworkqueue=<n>", strprintf("Set the depth of the work queue to service RPC calls (default: %d)", DEFAULT_HTTP_WORKQUEUE));
         strUsage += HelpMessageOpt("-rpcservertimeout=<n>", strprintf("Timeout during HTTP requests (default: %d)", DEFAULT_HTTP_SERVER_TIMEOUT));
     }
+    strUsage += HelpMessageOpt("-customlogdir=<dir>", _("custom log dir"));
 
     return strUsage;
 }
@@ -1675,5 +1676,22 @@
     }
 #endif
 
+    // ********************************************************* Step: init custom log
+    std::string customLogDir = GetArg("-customlogdir", "");
+    if (customLogDir.length()) {
+        CBlock block;
+        ReadBlockFromDisk(block, chainActive.Tip(), Params().GetConsensus());
+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);
+        ssBlock << block;
+        std::string blkHex = HexStr(ssBlock.begin(), ssBlock.end());
+        bool res = customLog.init(customLogDir,
+                                  chainActive.Height(),
+                                  chainActive.Tip()->GetBlockHash().ToString(),
+                                  blkHex);
+        if (!res) {
+            // TODO: throw exception
+        }
+    }
+
     return !fRequestShutdown;
 }
diff -uNr bitcoin-0.12.1/src/main.cpp bitcoin-0.12.1-explorer/src/main.cpp
--- bitcoin-0.12.1/src/main.cpp	2016-04-11 19:01:43.000000000 +0800
+++ bitcoin-0.12.1-explorer/src/main.cpp	2016-04-22 19:13:17.000000000 +0800
@@ -14,6 +14,7 @@
 #include "consensus/consensus.h"
 #include "consensus/merkle.h"
 #include "consensus/validation.h"
+#include "core_io.h"
 #include "hash.h"
 #include "init.h"
 #include "merkleblock.h"
@@ -82,6 +83,7 @@
 CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);
 
 CTxMemPool mempool(::minRelayTxFee);
+CustomLog customLog;
 
 struct COrphanTx {
     CTransaction tx;
@@ -1004,7 +1006,7 @@
 
 bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,
                               bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee,
-                              std::vector<uint256>& vHashTxnToUncache)
+                              std::vector<uint256>& vHashTxnToUncache, bool fOutputLog)
 {
     AssertLockHeld(cs_main);
     if (pfMissingInputs)
@@ -1186,6 +1188,20 @@
             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, "insufficient priority");
         }
 
+        // tx size greater than 2000, must have enough fees
+        if (nSize > 2000 && nFees < ::minRelayTxFee.GetFee(nSize)) {
+            return state.DoS(0, error("AcceptToMemoryPool: not enough fees %s, size: %u, %d < %d",
+                                      hash.ToString(), nSize, nFees, ::minRelayTxFee.GetFee(nSize)),
+                             REJECT_INSUFFICIENTFEE, "insufficient fee(2000)");
+        }
+
+        // tx size greater than 10000, must have enough fees
+        if (nSize > 10000 && nFees < ::minRelayTxFee.GetFee(nSize)*2) {
+            return state.DoS(0, error("AcceptToMemoryPool: not enough fees %s, size: %u, %d < %d",
+                                      hash.ToString(), nSize, nFees, ::minRelayTxFee.GetFee(nSize)*2),
+                             REJECT_INSUFFICIENTFEE, "insufficient fee(10000)");
+        }
+
         // Continuously rate-limit free (really, very-low-fee) transactions
         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to
         // be annoying or make others' transactions take longer to confirm.
@@ -1423,14 +1439,19 @@
 
     SyncWithWallets(tx, NULL);
 
+    // custom log tx
+    if (fOutputLog) {
+        customLog.appendf(2, "%s|%s", hash.ToString().c_str(), EncodeHexTx(tx).c_str());
+    }
+
     return true;
 }
 
 bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,
-                        bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee)
+                        bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee, bool fOutputLog)
 {
     std::vector<uint256> vHashTxToUncache;
-    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, fOverrideMempoolLimit, fRejectAbsurdFee, vHashTxToUncache);
+    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, fOverrideMempoolLimit, fRejectAbsurdFee, vHashTxToUncache, fOutputLog);
     if (!res) {
         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)
             pcoinsTip->Uncache(hashTx);
@@ -2574,6 +2595,21 @@
       DateTimeStrFormat("%Y-%m-%d %H:%M:%S", chainActive.Tip()->GetBlockTime()),
       Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), chainActive.Tip()), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());
 
+    // write custom log
+    if (customLog.IsInitialized()) {
+        CBlock block;
+        ReadBlockFromDisk(block, chainActive.Tip(), Params().GetConsensus());
+
+        CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);
+        ssBlock << block;
+        std::string blkHex = HexStr(ssBlock.begin(), ssBlock.end());
+
+        customLog.appendf(1/*block*/, "%d|%s|%s",
+                          chainActive.Height(),
+                          chainActive.Tip()->GetBlockHash().ToString().c_str(),
+                          blkHex.c_str());
+    }
+
     cvBlockChange.notify_all();
 
     // Check the version of the last 100 blocks to see if we need to upgrade:
@@ -5003,7 +5039,7 @@
         pfrom->setAskFor.erase(inv.hash);
         mapAlreadyAskedFor.erase(inv);
 
-        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))
+        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs, false, false, true))
         {
             mempool.check(pcoinsTip);
             RelayTransaction(tx);
@@ -5037,7 +5073,7 @@
 
                     if (setMisbehaving.count(fromPeer))
                         continue;
-                    if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2))
+                    if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2, false, false, true))
                     {
                         LogPrint("mempool", "   accepted orphan tx %s\n", orphanHash.ToString());
                         RelayTransaction(orphanTx);
diff -uNr bitcoin-0.12.1/src/main.h bitcoin-0.12.1-explorer/src/main.h
--- bitcoin-0.12.1/src/main.h	2016-04-11 19:01:43.000000000 +0800
+++ bitcoin-0.12.1-explorer/src/main.h	2016-04-21 10:19:11.000000000 +0800
@@ -16,6 +16,7 @@
 #include "net.h"
 #include "script/script_error.h"
 #include "sync.h"
+#include "util.h"
 #include "versionbits.h"
 
 #include <algorithm>
@@ -128,6 +129,7 @@
 extern CScript COINBASE_FLAGS;
 extern CCriticalSection cs_main;
 extern CTxMemPool mempool;
+extern CustomLog customLog;
 typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;
 extern BlockMap mapBlockIndex;
 extern uint64_t nLastBlockTx;
@@ -275,7 +277,7 @@
 
 /** (try to) add transaction to memory pool **/
 bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,
-                        bool* pfMissingInputs, bool fOverrideMempoolLimit=false, bool fRejectAbsurdFee=false);
+                        bool* pfMissingInputs, bool fOverrideMempoolLimit=false, bool fRejectAbsurdFee=false, bool fOutputLog=false);
 
 /** Convert CValidationState to a human-readable message for logging */
 std::string FormatStateMessage(const CValidationState &state);
diff -uNr bitcoin-0.12.1/src/rpcblockchain.cpp bitcoin-0.12.1-explorer/src/rpcblockchain.cpp
--- bitcoin-0.12.1/src/rpcblockchain.cpp	2016-04-11 19:01:43.000000000 +0800
+++ bitcoin-0.12.1-explorer/src/rpcblockchain.cpp	2016-04-21 10:51:52.000000000 +0800
@@ -9,6 +9,7 @@
 #include "checkpoints.h"
 #include "coins.h"
 #include "consensus/validation.h"
+#include "core_io.h"
 #include "main.h"
 #include "policy/policy.h"
 #include "primitives/transaction.h"
@@ -912,3 +913,108 @@
 
     return NullUniValue;
 }
+
+UniValue blockToJSON2(const CBlock& block, const CBlockIndex* blockindex)
+{
+    UniValue result(UniValue::VOBJ);
+    result.push_back(Pair("hash", block.GetHash().GetHex()));
+    int confirmations = -1;
+    // Only report confirmations if the block is on the main chain
+    if (chainActive.Contains(blockindex))
+        confirmations = chainActive.Height() - blockindex->nHeight + 1;
+    result.push_back(Pair("confirmations", confirmations));
+    result.push_back(Pair("size", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));
+    result.push_back(Pair("height", blockindex->nHeight));
+    result.push_back(Pair("version", block.nVersion));
+    result.push_back(Pair("merkleroot", block.hashMerkleRoot.GetHex()));
+    UniValue txs(UniValue::VARR);
+    BOOST_FOREACH(const CTransaction&tx, block.vtx)
+    {
+        UniValue txObj(UniValue::VOBJ);
+        txObj.push_back(Pair("hash", tx.GetHash().GetHex()));
+        txObj.push_back(Pair("rawhex", EncodeHexTx(tx)));
+        txs.push_back(txObj);
+    }
+    result.push_back(Pair("tx", txs));
+    result.push_back(Pair("time", block.GetBlockTime()));
+    result.push_back(Pair("nonce", (uint64_t)block.nNonce));
+    result.push_back(Pair("bits", strprintf("%08x", block.nBits)));
+    result.push_back(Pair("difficulty", GetDifficulty(blockindex)));
+    result.push_back(Pair("chainwork", blockindex->nChainWork.GetHex()));
+
+    if (blockindex->pprev)
+        result.push_back(Pair("previousblockhash", blockindex->pprev->GetBlockHash().GetHex()));
+    CBlockIndex *pnext = chainActive.Next(blockindex);
+    if (pnext)
+        result.push_back(Pair("nextblockhash", pnext->GetBlockHash().GetHex()));
+
+    CDataStream ssBlock(SER_NETWORK, PROTOCOL_VERSION);
+    ssBlock << block;
+    std::string strHex = HexStr(ssBlock.begin(), ssBlock.end());
+    result.push_back(Pair("rawhex", strHex));
+
+    return result;
+}
+
+
+UniValue bm_get_best_block(const UniValue& params, bool fHelp)
+{
+    if (fHelp || params.size() != 0)
+        throw runtime_error(
+                            "bm_get_best_block\n"
+                            "\nReturns best block\n"
+                            "\nResult:\n"
+                            "{\n"
+                            "  \"height\": xxxxx                (numeric) Height of current best block\n"
+                            "  \"hash\": xxxxx                  (string)  Hash of current best block\n"
+                            "  \"prev_hash\": xxxxx             (string)  Hash of previous block\n"
+                            "}\n"
+                            + HelpExampleCli("bm_get_best_block", "")
+                            + HelpExampleRpc("bm_get_best_block", "")
+                            );
+
+    CBlockIndex *blockindex = chainActive.Tip();
+    UniValue ret(UniValue::VOBJ);
+    ret.push_back(Pair("height", (int)chainActive.Height()));
+    ret.push_back(Pair("hash",   blockindex->GetBlockHash().GetHex()));
+    if (blockindex->pprev) {
+        ret.push_back(Pair("prev_hash", blockindex->pprev->GetBlockHash().GetHex()));
+    }
+    return ret;
+}
+
+UniValue bm_get_block_detail(const UniValue& params, bool fHelp)
+{
+    if (fHelp || params.size() != 1)
+        throw runtime_error(
+                            "bm_get_block_detail height_or_hash\n"
+                            "\nReturns block detail infomation at height/hash provided.\n"
+                            "\nArguments:\n"
+                            "1. height_or_hash  (numeric/string, required) The block height or hash\n"
+                            "\nResult:\n"
+                            "\"Json Object of the Block\n"
+                            + HelpExampleCli("bm_get_block_detail", "100000")
+                            + HelpExampleRpc("bm_get_block_detail", "100000")
+                            );
+
+    std::string strHash = params[0].get_str();
+    CBlockIndex* pblockindex;
+    CBlock block;
+
+    if (strHash.length() == 64) {
+        uint256 hash(uint256S(strHash));
+        if (mapBlockIndex.count(hash) == 0)
+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, "Block not found");
+        pblockindex = mapBlockIndex[hash];
+    } else {
+        const int nHeight = atoi(strHash.c_str());
+        if (nHeight < 0 || nHeight > chainActive.Height())
+            throw JSONRPCError(RPC_INVALID_PARAMETER, "Block height out of range");
+        pblockindex = chainActive[nHeight];
+    }
+
+    if(!ReadBlockFromDisk(block, pblockindex, Params().GetConsensus()))
+        throw JSONRPCError(RPC_INTERNAL_ERROR, "Can't read block from disk");
+
+    return blockToJSON2(block, pblockindex);
+}
diff -uNr bitcoin-0.12.1/src/rpcrawtransaction.cpp bitcoin-0.12.1-explorer/src/rpcrawtransaction.cpp
--- bitcoin-0.12.1/src/rpcrawtransaction.cpp	2016-04-11 19:01:43.000000000 +0800
+++ bitcoin-0.12.1-explorer/src/rpcrawtransaction.cpp	2016-04-19 18:13:47.000000000 +0800
@@ -823,7 +823,7 @@
         // push to local node and sync with wallets
         CValidationState state;
         bool fMissingInputs;
-        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, false, !fOverrideFees)) {
+        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, false, !fOverrideFees, true)) {
             if (state.IsInvalid()) {
                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf("%i: %s", state.GetRejectCode(), state.GetRejectReason()));
             } else {
diff -uNr bitcoin-0.12.1/src/rpcserver.cpp bitcoin-0.12.1-explorer/src/rpcserver.cpp
--- bitcoin-0.12.1/src/rpcserver.cpp	2016-04-11 19:01:43.000000000 +0800
+++ bitcoin-0.12.1-explorer/src/rpcserver.cpp	2016-04-19 18:14:29.000000000 +0800
@@ -289,6 +289,8 @@
     { "blockchain",         "verifytxoutproof",       &verifytxoutproof,       true  },
     { "blockchain",         "gettxoutsetinfo",        &gettxoutsetinfo,        true  },
     { "blockchain",         "verifychain",            &verifychain,            true  },
+    { "blockchain",         "bm_get_best_block",      &bm_get_best_block,      true  },
+    { "blockchain",         "bm_get_block_detail",    &bm_get_block_detail,    true  },
 
     /* Mining */
     { "mining",             "getblocktemplate",       &getblocktemplate,       true  },
diff -uNr bitcoin-0.12.1/src/rpcserver.h bitcoin-0.12.1-explorer/src/rpcserver.h
--- bitcoin-0.12.1/src/rpcserver.h	2016-04-11 19:01:43.000000000 +0800
+++ bitcoin-0.12.1-explorer/src/rpcserver.h	2016-04-19 18:15:17.000000000 +0800
@@ -264,6 +264,8 @@
 extern UniValue getchaintips(const UniValue& params, bool fHelp);
 extern UniValue invalidateblock(const UniValue& params, bool fHelp);
 extern UniValue reconsiderblock(const UniValue& params, bool fHelp);
+extern UniValue bm_get_best_block(const UniValue& params, bool fHelp);
+extern UniValue bm_get_block_detail(const UniValue& params, bool fHelp);
 
 bool StartRPC();
 void InterruptRPC();
diff -uNr bitcoin-0.12.1/src/util.cpp bitcoin-0.12.1-explorer/src/util.cpp
--- bitcoin-0.12.1/src/util.cpp	2016-04-11 19:01:43.000000000 +0800
+++ bitcoin-0.12.1-explorer/src/util.cpp	2016-04-19 18:18:32.000000000 +0800
@@ -37,6 +37,7 @@
 
 #include <algorithm>
 #include <fcntl.h>
+#include <sys/file.h>
 #include <sys/resource.h>
 #include <sys/stat.h>
 
@@ -836,3 +837,162 @@
 #endif
 }
 
+CustomLog::CustomLog(): isInitialized_(false), fd_(-1), f_(NULL), fileIndex_(0)
+{
+}
+
+CustomLog::~CustomLog() {
+   if (fd_ != -1) {
+       flock(fd_, LOCK_UN);
+       close(fd_);
+       fd_ = -1;
+   }
+
+    if (f_ != NULL) {
+        fclose(f_);
+        f_ = NULL;
+    }
+}
+
+bool CustomLog::init(const std::string dir, const int blockHeight,
+                     const std::string &blockHash, const std::string &blockHex) {
+    namespace fs = boost::filesystem;
+
+    // create dir
+    dir_ = dir;
+    if (dir_[dir_.length() - 1] == '/') {
+        dir_.resize(dir_.length() - 1);  // remove last '/'
+    }
+    fs::path p(dir_);
+    TryCreateDirectory(p);
+    if (!fs::exists(p) || !fs::is_directory(p)) {
+        return false;
+    }
+
+    // create notify file
+    notifyFile_ = dir_ + "/NOTIFY_LOG1PRODUCER";
+    FILE *f = fopen(notifyFile_.c_str(), "w");
+    if (f == NULL) {
+        return false;
+    }
+    fclose(f);
+
+    // lock file
+    const string lockFile = strprintf("%s/LOCK", dir_.c_str());
+    fd_ = open(lockFile.c_str(), O_RDWR|O_CREAT|O_TRUNC, 0644);
+    if (flock(fd_, LOCK_EX) != 0) {
+        LogPrintf("can't lock file: %s", lockFile.c_str());
+        return false;
+    }
+
+    // clean all old log files
+    const string logDir = strprintf("%s/files", dir_.c_str());
+    fs::path filesPath(logDir);
+    TryCreateDirectory(filesPath);
+    if (!fs::exists(filesPath) || !fs::is_directory(filesPath)) {
+        return false;
+    }
+    for (fs::directory_iterator end, it(filesPath); it != end; ++it) {
+        LogPrintf("remove old log file: %s", it->path().c_str());
+        boost::uintmax_t n = fs::remove_all(it->path());
+        if (n != 1) {
+            LogPrintf("delete file return file number(%u) is NOT 1, file: %s",
+                      n, it->path().c_str());
+            return false;
+        }
+    }
+
+    // write begin infomation
+    {
+        const string beginFile = strprintf("%s/BEGIN", dir_.c_str());
+        FILE *fBeginFile = fopen(beginFile.c_str(), "w");
+        if (fBeginFile == NULL) {
+            LogPrintf("open file failure: %s", beginFile.c_str());
+            return false;
+        }
+        const string info = strprintf("%u\n", time(NULL));
+        if (fwrite(info.c_str(), 1, info.size(), fBeginFile) != info.size()) {
+            LogPrintf("fwrite file failure: %s", beginFile.c_str());
+            return false;
+        }
+        fclose(fBeginFile);
+    }
+
+    // init finish
+    isInitialized_ = true;
+
+    // write begin block
+    trySwitchFile();
+    appendf(1/*block*/, "%d|%s|%s", blockHeight, blockHash.c_str(), blockHex.c_str());
+
+    return true;
+}
+
+bool CustomLog::IsInitialized() {
+    return isInitialized_;
+}
+void CustomLog::append(const int logType, const char *str) {
+    boost::mutex::scoped_lock sl(lock_);
+    trySwitchFile();
+
+    const string date = DateTimeStrFormat("%Y-%m-%d %H:%M:%S", GetTime());
+    const string line = strprintf("%s,%d,%s\n", date.c_str(), logType, str);
+
+    fwrite(line.c_str(), line.size(), 1, f_);
+    fflush(f_);
+
+    // IN_CLOSE_NOWRITE
+    FILE *f = fopen(notifyFile_.c_str(), "r");
+    assert(f != NULL);
+    fclose(f);
+}
+
+void CustomLog::appendf(const int logType, const char *fmt, ...) {
+    if (!isInitialized_) { return; }
+
+    // make string
+    char tmp[1024];
+    string dest;
+    va_list al;
+    va_start(al, fmt);
+    int len = vsnprintf(tmp, 1024, fmt, al);
+    va_end(al);
+    if (len > 1023) {
+        char * destbuff = new char[len+1];
+        va_start(al, fmt);
+        len = vsnprintf(destbuff, len+1, fmt, al);
+        va_end(al);
+        dest.append(destbuff, len);
+        delete destbuff;
+    } else {
+        dest.append(tmp, len);
+    }
+
+    append(logType, dest.c_str());
+}
+
+void CustomLog::trySwitchFile() {
+    // close old FILE ptr if need
+    if (f_ != NULL) {
+        // check file size
+        long size = ftell(f_);
+        if (size < 500 * 1024 * 1024) {
+            return;  // no need to switch file
+        }
+        fclose(f_);
+        f_ = NULL;
+    }
+
+    // create new file
+    const string filePath = strprintf("%s/files/%d.log",
+                                      dir_.c_str(), fileIndex_++);
+    FILE *f = fopen(filePath.c_str(), "a");
+    if (f == NULL) {
+        LogPrintf("open file failure when switch log: %s", filePath.c_str());
+        // TODO: throw exception
+    }
+
+    // switch to new FILE ptr
+    f_ = f;
+}
+
diff -uNr bitcoin-0.12.1/src/util.h bitcoin-0.12.1-explorer/src/util.h
--- bitcoin-0.12.1/src/util.h	2016-04-11 19:01:43.000000000 +0800
+++ bitcoin-0.12.1-explorer/src/util.h	2016-04-19 18:19:24.000000000 +0800
@@ -21,12 +21,14 @@
 #include <exception>
 #include <map>
 #include <stdint.h>
+#include <stdio.h>
 #include <string>
 #include <vector>
 
 #include <boost/filesystem/path.hpp>
 #include <boost/signals2/signal.hpp>
 #include <boost/thread/exceptions.hpp>
+#include <boost/thread.hpp>
 
 static const bool DEFAULT_LOGTIMEMICROS = false;
 static const bool DEFAULT_LOGIPS        = false;
@@ -247,4 +249,29 @@
     }
 }
 
+
+class CustomLog {
+    bool isInitialized_;
+    boost::mutex lock_;
+    std::string dir_;
+    std::string notifyFile_;
+
+    int fd_;   // LOCK file
+    FILE *f_;  // log file handler
+    int fileIndex_;
+
+    void trySwitchFile();
+    void append(const int logType, const char *str);
+
+public:
+    CustomLog();
+    ~CustomLog();
+
+    bool init(const std::string dir, const int blockHeight,
+              const std::string &blockHash, const std::string &blockHex);
+    bool IsInitialized();
+    void appendf(const int logType, const char *fmt, ...);
+
+};
+
 #endif // BITCOIN_UTIL_H
