// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TEST_FBE_H_
#define FLATBUFFERS_GENERATED_TEST_FBE_H_

#include "flatbuffers/flatbuffers.h"


namespace fbe {

struct FooBar;
struct FooBar2;

struct FooBar FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t id() const { return GetField<int32_t>(4, 0); }
  bool mutate_id(int32_t id) { return SetField(4, id); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(6); }
  flatbuffers::String *mutable_name() { return GetPointer<flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* name */) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct FooBarBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(4, id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(6, name); }
  FooBarBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FooBarBuilder &operator=(const FooBarBuilder &);
  flatbuffers::Offset<FooBar> Finish() {
    auto o = flatbuffers::Offset<FooBar>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FooBar> CreateFooBar(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0) {
  FooBarBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

struct FooBar2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<int32_t> *int_arr() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(4); }
  flatbuffers::Vector<int32_t> *mutable_int_arr() { return GetPointer<flatbuffers::Vector<int32_t> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* int_arr */) &&
           verifier.Verify(int_arr()) &&
           verifier.EndTable();
  }
};

struct FooBar2Builder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_int_arr(flatbuffers::Offset<flatbuffers::Vector<int32_t>> int_arr) { fbb_.AddOffset(4, int_arr); }
  FooBar2Builder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FooBar2Builder &operator=(const FooBar2Builder &);
  flatbuffers::Offset<FooBar2> Finish() {
    auto o = flatbuffers::Offset<FooBar2>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<FooBar2> CreateFooBar2(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<int32_t>> int_arr = 0) {
  FooBar2Builder builder_(_fbb);
  builder_.add_int_arr(int_arr);
  return builder_.Finish();
}

}  // namespace fbe

#endif  // FLATBUFFERS_GENERATED_TEST_FBE_H_
